generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            Int      @map("user_id")
  provider          Provider
  providerAccountId String   @map("provider_account_id")
  accessToken       String?  @map("access_token")
  refreshToken      String?  @map("refresh_token")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

enum Provider {
  Github
  Vk
  Yandex
}

model User {
  id                 Int                 @id @default(autoincrement())
  name               String?
  email              String              @unique @map("email")
  emailVerified      Boolean             @default(false) @map("email_verified")
  image              String?             @map("image")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  password           String?             @map("password")
  isTwoFactorEnabled Boolean             @default(false) @map("is_two_factor_enabled")
  accounts           Account[]
  twoFactorTokens    TwoFactorToken[]
  verificationTokens VerificationToken[]

  @@map("users")
}

model TwoFactorToken {
  id      Int      @id @default(autoincrement())
  email   String   @map("email")
  token   String   @unique @map("token")
  expires DateTime @map("expires")

  userId Int?  @map("user_id")
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, token])
  @@map("two_factor_tokens")
}

enum TokenPurpose {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  EMAIL_CHANGE
  ACCOUNT_DELETION
}

model VerificationToken {
  id        Int          @id @default(autoincrement())
  token     String       @unique @map("token")
  purpose   TokenPurpose @map("purpose")
  expires   DateTime     @map("expires")
  createdAt DateTime     @default(now()) @map("created_at")

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_tokens")
}
